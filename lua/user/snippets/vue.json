{
  "setup": {
    "prefix": [
      "setup",
      "template"
    ],
    "body": [
      "<template>",
      "\t$1",
      "</template>",
      "",
      "<script lang=\"ts\" setup>",
      "\t$2",
      "</script>",
      "",
      "<style lang=\"sass\">",
      "\t$3",
      "</style>",
      ""
    ],
    "description": "My standard setup Vue3 + TS"
  },
  "comp": {
    "scope": "vue",
    "prefix": "comp",
    "body": [
      "<template>",
      "  <div>",
      "    $1",
      "  </div>",
      "</template>",
      "",
      "<script lang=\"ts\">",
      "import { defineComponent, PropType } from 'vue';",
      "",
      "export default defineComponent({",
      "  name: '$1',",
      "",
      "  components: {},",
      "",
      "  props: {},",
      "",
      "  setup() { ",
      "    return {};",
      "  },",
      "});",
      "</script>",
      "",
      "<style scoped lang=\"css\"></style>"
    ],
    "description": "Create a vue component"
  },
  "vueTest": {
    "prefix": "vueTest",
    "body": [
      "import { mount } from '@vue/test-utils';",
      "import Foo from '../Foo.vue';",
      "",
      "const getWrapper = (props: any = {}) => mount(Foo, {",
      "  propsData: {",
      "    ...props,",
      "  },",
      "});",
      "",
      "const SELECTORS = {",
      "  FOO: '[data-test-id=\"foo\"]',",
      "};",
      "",
      "describe('Foo', () => {",
      "  it('should render partner id conrrectly', () => {",
      "    const wrapper = getWrapper({});",
      "    expect(wrapper.find(SELECTORS.FOO).text()).toBe('foo');",
      "  });",
      "});"
    ],
    "description": "Create a vue component test"
  }
}
